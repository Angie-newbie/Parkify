name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      # Backend
      PORT: 5000
      MONGO_URI: ${{ secrets.MONGO_URI }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      
      # Frontend
      VITE_API_BASE_URL: http://localhost:5000/api

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'

      - name: Install dependencies (root)
        run: npm install

      - name: Install backend dependencies
        run: |
          cd Backend
          npm install

      - name: Install frontend dependencies
        run: |
          cd Frontend
          npm install

      # Run tests and save output to log file in parent directory
      - name: Run backend tests
        run: |
          cd Backend
          npm test | tee ../test-results.log
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
    
      #  Save test results for later analysis
      - name: Upload test logs
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-logs
          path: test-results.log


      - name: Build backend
        run: |
          cd Backend
          npm run build

      - name: Build frontend
        run: |
          cd Frontend
          npm run build

      # Package deployment artifact (zip both Backend + Frontend build outputs)
      - name: Create deployment artifact
        run: |
          mkdir -p deploy
          cp -r Backend deploy/Backend
          cp -r Frontend/dist deploy/Frontend
          cd deploy
          zip -r ../app.zip .
        shell: bash

      - name: Copy Frontend build to EC2
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "./Frontend/dist/*"
          target: "/home/ec2-user/app/Frontend/dist"

      - name: Copy Backend files to EC2
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "./Backend/*"
          target: "/home/ec2-user/app/Backend"

      - name: Restart backend
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ec2-user/app/Backend
            npm install --production
            pm2 restart parkify || pm2 start index.js --name parkify


  analyze:
    needs: build
    runs-on: ubuntu-latest
    steps:
        # Download the test logs from the previous job
      - uses: actions/download-artifact@v4
        with:
          name: backend-test-logs

        # Display the contents of the test log file
      - name: Show log file
        run: cat test-results.log
